"If viewing this file and it appears like with several '+-- X lines: ...'
" you can expand them easily by hovering over them and typing either:
" 1) ', ' which is <leader><space>
" 2) 'za'
" Settings {{{
" Looks {{{
set t_Co=256        "Terminal Colors set to 256
syntax on           "Creates better highlighting
colorscheme molokai "Uses the very nice looking 'molokai' thee
highlight Normal ctermfg=grey ctermbg=black
set background=dark
set clipboard=unnamed,unnamedplus " Allows Vim to use System Clipboard
" }}}
"Layout {{{
set relativenumber  " Show Relative Number on non-selected lines
set number          " Show Highlighted Line number in relation to file
set ruler           " Shows current position
set noshowmode      " Prevents the 'mode' from showing (this is because airline does this for us)
set laststatus=2    " Making Statusline appear
set lazyredraw      " Redraw the screen less, leading to faster response
set showmatch       " Shows matching bracket when highlighting with cursor
set spelllang=en_us " If Spell Check is enabled (<leader>ss) then use US English
set nolinebreak     " I do NOT want my text breaking at 80 columns
set textwidth=0     " Playing with settings to make my 80 column highlight stop...
set cursorline      " Show a highlighted line where cursor is at
" }}}
"Folding {{{
set foldenable        " Enables Folding
set foldlevelstart=10 " Opens the first 10 folds by default
set foldnestmax=10    " 10 nested fold max
set foldmethod=marker " Tells Vim to fold based on indent level
set modeline          " Turn ModeLine On
set modelines=1       " Checks last line for file specific commands via ModeLine
" }}}
"Spacing, Tab Key, and Indention {{{
set smartindent     " Smarter indenting
set backspace=2     " Backspace in insert mode works like normal editor
set expandtab       " 1 tab = 4 spaces
set shiftwidth=4    " 1 tab = 4 spaces
set tabstop=4       " Backspace over a full tab if tab is expanded to tabstop or expandtab
set softtabstop=4   " Backspace over a full tab if tab is expanded to tabstop or expandtab
set showtabline=2   " Always display the tabline, even if there is only 1 tab
" }}}
"Filetype Specific indents {{{
filetype indent on  " Activates indenting for files
filetype plugin on  " Activates plugins for file types
autocmd Filetype puppet setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd Filetype yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd Filetype ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
" }}}
"Menu and Search {{{
set wildmode=list:longest " Make 'wildmenu' behave a little nicer
set ignorecase      " Ignores case when searching
set smartcase       " Even with ignore case, still try to be smart about it
" }}}
" }}}
" Key Remaps {{{
" Remaps with LEADER {{{
" Leader is comma
let mapleader=","
" Intelligently Add/Remove line numbers
nnoremap <silent> <leader>n :set invnumber <bar> :set invrelativenumber<CR>
" Run the entire file through the indent filter with <Leader>=
noremap <silent> <Leader>= :call Preserve("normal gg=G")<CR>
" Leader-space open/closes folds
nnoremap <leader><space> za
" Quick saving of files
nnoremap <leader>w :w!<CR>
" Remove the extra ^M that windows creates at the end of lines
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
" ,y yanks to end of line
nnoremap <leader>y y$
" Toggle paste mode with <Leader>p (need to turn it back off again though!)
nnoremap <leader>p :set invpaste paste?<CR>
" Delete (not cut) selection
nnoremap <leader>d "_d
vnoremap <leader>d "_d
" }}}
" Remaps with g/G {{{
" Highlights last inserted text from insert mode in visual mode
nnoremap gV `[v`]
" Create Space above or below current line! (Shift above Ctrl)
nmap gO O<ESC>j
nmap g<C-O> o<ESC>k
" Make g{ and g} move paragraphs with text instead of to blank lines
nnoremap <expr> g{ len(getline(line('.')-1)) > 0 ? '{+' : '{-'
nnoremap <expr> g} len(getline(line('.')+1)) > 0 ? '}-' : '}+'
" Visual highlight last inserted text
nnoremap gV `[v`]
" }}}
" Extended Functionality {{{
"For lines longer then the screens width, treat them as separated lines
" :W (Capitol W) saves the file with sudo, needed when editing some files
command! W w !sudo tee % > /dev/null
" Map <F1> to <Esc> everywhere
map <F1> <Esc>
imap <F1> <Esc>
vmap <F1> <Esc>
nmap <F1> <Esc>
" Space to turn off highlighting
nnoremap <silent><Space> :nohlsearch<Bar>:echo<CR>
" }}}
" Key maps for Vims built in 'Spell Check' {{{
" Enables spell check, but only after pressing ,ss like 'set spell'
nnoremap <leader>ss :setlocal invspell<CR>:setlocal invcursorline<CR>
" ADD the word under the cursor to the spell file
nnoremap <leader>sa zg
" DELETE a word that you had previously said was good from the spell file
nnoremap <leader>sd zW
" CHANGE the word under the cursor (pulls up a list of words to change it to
nnoremap <leader>sc z=
" CHANGE the word under the cursor to the first suggestion that would pop up
nnoremap <leader>sC 1z=
" Repeat the replacement of z= for all matches in the current window
nnoremap <leader>sz :spellrepall<CR>
" Search Forwards for a misspelled word
nnoremap <leader>sf ]s
" Search Backwards for a misspelled word
nnoremap <leader>sF [s
" }}}
" Key maps for Plugins {{{
" The below sets NERDTree to Ctrl+N
map <C-n> :NERDTreeToggle<CR>
nmap <Leader>r :RuboCop<CR>
" }}}
" Delete/Change surrounding characters {{{
" ds<char> only deletes
" cs<char> deletes and puts you into insert mode
noremap ds{ F{xf}x
noremap cs{ F{xf}xi
noremap ds" F"x,x
noremap cs" F"x,xi
noremap ds' F'x,x
noremap cs' F'x,xi
noremap ds( F(xf)x
noremap cs( F(xf)xi
noremap ds) F(xf)x
noremap cs) F(xf)xi
" }}}
" Arrow Key Remaps {{{
" Move current line up or down 1 line
noremap <up> ddkP
noremap <down> ddp
" Don't use these keys for anything
noremap <left> <Nop>
noremap <right> <Nop>
inoremap <up> <Nop>
inoremap <down> <Nop>
inoremap <left> <Nop>
inoremap <right> <Nop>
vnoremap <up> <Nop>
vnoremap <down> <Nop>
vnoremap <left> <Nop>
vnoremap <right> <Nop>
" }}}
" Make J and K work with Relative Number {{{
function! Down(vcount)
    if a:vcount == 0
        exe "normal! gj"
    else
        exe "normal!".a:vcount."j"
    endif
endfunction
function! Up(vcount)
    if a:vcount == 0
        exe "normal! gk"
    else
        exe "normal!".a:vcount."k"
    endif
endfunction

nnoremap <silent> j :<C-U>call Down(v:count)<CR>
vnoremap <silent> j gj
nnoremap <silent> k :<C-U>call Up(v:count)<CR>
vnoremap <silent> k gk
" }}}
" }}}
" Functions/AuGroups {{{
" OS Detection {{{
let s:has_arch = 0
let s:has_ubuntu = 0
let s:has_mac = 0
if has('unix')
    let s:uname = system('uname -s')
    if s:uname =~? 'Darwin'
        let s:has_mac = 1
    else
        let s:issue = system('cat /etc/issue')
        if s:issue =~? 'Arch Linux'
            let s:has_arch = 1
        elseif s:issue =~? 'Ubuntu'
            let s:has_ubuntu = 1
        endif
    endif
endif
" }}}
"Delete trailing white space on save, useful for Python {{{
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
"}}}
"Writing and backing up files {{{
set backupdir=~/.config/nvim/backup// " Backup files
set directory=~/.config/nvim/swap//   " Swap Files
set undodir=~/.config/nvim/undo//     " Undo files
" If a directory doesn't exist, create it
function! s:mkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:mkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
" }}}
"TMux, allow cursor change based on presence of TMux {{{
" Sets cursor to Vertical Bar when using TMux
" Sets cursor to Block when not using TMux
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}
" }}}
" Plugin Stuff {{{
" Autoinstall Vim-plug {{{
let s:plugins=$XDG_CONFIG_HOME . '/plugged'
let s:plugin_manager=$XDG_CONFIG_HOME . '/autoload/plug.vim'
let s:plugin_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    echo 'vim-plug not found. Installing...'
    if executable('curl')
        silent exec '!curl -fLo  ~/.config/nvim/autoload/plug.vim --create-dirs ' .
                    \ s:plugin_url
    else
        echom 'Could not download vim-plug. No plugins were installed.'
        finish
    endif
    augroup vimplug
        autocmd!
        autocmd VimEnter * PlugInstall
    augroup END
endif
" }}}
" Plugins to Install {{{
call plug#begin('~/.config/nvim/plugged')   " Starts using Vim-plug https://github.com/junegunn/Vim-plug
" Commenting out Airline, I'm going to tryout LightLine
" Plug 'vim-airline/vim-airline'             " Useful status bar for *Vim
" Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/lightline.vim'         " Replacement for Airline
Plug 'tomasr/molokai'                " Color scheme 'Molokai' for Vim
Plug 'Lokaltog/vim-easymotion'       " \ss causes triggers easy motion
Plug 'godlygeek/csapprox'            " Makes GVim Color Schemes work in Terminal Vim
Plug 'godlygeek/tabular'             " Awesome plugin for aligning text
Plug 'tpope/vim-fugitive'            " TPope's Git integration into Vim
Plug 'tpope/vim-surround'            " Helps surrounding code and text with other code and text
Plug 'tpope/vim-sensible'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }      " Tree file navigator
" Plug 'puppetlabs/puppet-syntax-vim', { 'for': 'puppet' }    " Puppet Syntax Highlighting
" Plug 'rodjek/vim-puppet', { 'for': 'puppet' }               " Helps Vim Play Nice with Puppet
" Plug 'rodjek/puppet-lint', { 'for': 'puppet' }              " Suggested by PuppetLabs as a linter
Plug 'klen/python-mode', { 'for': 'python' }                " Python editor on crack
Plug 'ngmy/vim-rubocop', { 'for': 'ruby' }                  " RuboCop build-in
Plug 'elzr/vim-json', { 'for': 'json' }                     " JSON Highlight and indent plugin
" Plug 'dougireton/vim-chef'           " Vim doesn't know what Chef is till now
Plug 'tmux-plugins/vim-tmux'         " A syntax highlighter for tmux! :D
Plug 'benekastah/neomake'            " Syntax Checker to replace Syntastic for NeoVim
Plug 'scrooloose/syntastic'          " So maybe neomake cant do everything...
Plug 'metakirby5/codi.vim'           " Real time REPL Scratchpad
Plug 'mhinz/vim-startify'            " Launch nvim standalone to access this
Plug 'junegunn/fzf', { 'dir': '~/.config/fzf', 'do': './install -all' }
Plug 'junegunn/fzf.vim'
Plug 'guns/xterm-color-table.vim'    " Shows XTERM Colors in terminal as they are typed
call plug#end()                      " Stops using Vim-plug
" }}}
" Lightline Specific settings {{{
let g:lightline = {
    \ 'colorscheme': 'molokai',
    \ 'active': {
    \   'left': [
    \      [ 'mode',
    \        'paste' ],
    \      [ 'filename',
    \        'fugitive' ]
    \   ],
    \   'right': [
    \      [ 'lineinfo' ],
    \      [ 'percent' ],
    \      [ 'syntastic',
    \        'nerdtree' ]
    \    ],
    \ },
    \ 'component_function': {
    \   'modified': 'LightlineModified',
    \   'readonly': 'LightlineReadonly',
    \   'fugitive': 'LightlineFugitive',
    \   'filename': 'LightlineFilename',
    \   'fileformat': 'LightlineFileformat',
    \   'filetype': 'LightlineFiletype',
    \   'fileencoding': 'LightlineFileencoding',
    \   'mode': 'LightlineMode',
    \ },
    \ 'component_expand': {
    \   'syntastic': 'SyntasticStatuslineFlag',
    \ },
    \ 'component_type': {
    \   'syntastic': 'error',
    \ },
    \ 'separator': {
    \   'left': '',
    \   'right': '',
    \ },
    \ 'subseparator': {
    \   'left': '',
    \   'right': '',
    \ },
    \ 'mode_map': {
    \   'No': 'NORMAL',
    \   'In': 'INSERT',
    \   'Re': 'REPLACE',
    \   'Vs': 'VISUAL',
    \   'VL': 'V-LINE',
    \   'VB': 'V-BLOCK',
    \   'Co': 'COMMAND',
    \   'Se': 'SELECT',
    \   'SL': 'S-LINE',
    \   "SB": 'S-BLOCK',
    \   'Te': 'TERMINAL',
    \ },
    \ }

function! LightlineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? ' ' : ''
endfunction

function! LightlineFilename()
 return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
       \  &ft == 'unite' ? unite#get_status_string() :
       \  &ft == 'vimshell' ? vimshell#get_status_string() :
       \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction
" }}}
" Neomake Specific Settings  {{{
let g:neomake_verbose = 0
let g:neomake_error_sign = {
            \ 'text': '>>',
            \ 'texthl': 'ErrorMsg',
            \ }
let g:neomake_warning_sign = {
            \ 'text': '>>',
            \ 'texthl': 'ErrorMsg',
            \ }
" }}}
" PLUGIN Markdown Preview {{{
if has('nvim') && executable('cargo')
    function! g:BuildComposer(info)
        if a:info.status !=# 'unchanged' || a:info.force
            !cargo build --release
            UpdateRemovePlugins
        endif
    endfunction

    Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
    let g:markdown_composer_syntax_theme='hybrid'
elseif executable('npm')
    Plug 'euclio/vim-instant-markdown', {
                \ 'for': 'markdown',
                \ 'do': 'npm install euclio/vim-instant-markdown-d'
                \}
endif

" }}}
" Molokai Specific Settings {{{
let g:rehash256 = 1 " More like the GUI 256 scheme'
let g:lightline_molokai_alternative = 1 " This is specific to LightLine
" }}}
" Syntastic Specific Settings {{{
let g:syntastic_check_on_open = 1 " Check on file open
let g:syntastic_check_on_wq = 0 " Don't check on :wq
let g:syntastic_enable_signs = 1 " Enable symbols listed below
let g:syntastic_auto_loc_list = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_error_symbol = "X"
let g:syntastic_style_error_symbol = ">"
let g:syntastic_warning_symbol = "!"
let g:syntastic_style_warning_symbol = ">"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Specific for C++ {{{
let g:syntastic_cpp_compiler = "g++" " Use g++ as compiler
let g:syntastic_cpp_check_header = 1 " Allows syntastic to check header files
let g:syntastic_cpp_compiler_options = ' -std=c++11 -Wall'

" }}}
" Specific for  Python {{{
let g:pymode_lint_write = 0 " This stops both python-mode and syntastic from both checking the file on write
let g:syntastic_python_checkers = ["python"]
" }}}
" Specific for Puppet {{{
let g:syntastic_puppet_checkers = ["puppetlint"]
" }}}
" Specific for Chef {{{
let g:syntastic_chef_checkers = ["foodcritic"]
" }}}
" }}}
" RuboCop Settings {{{
let g:vimrubocop_keymap = 0
" }}}
" }}}
" Do not edit below line unless you know what your doing
" Vim: set foldmethod=marker foldlevel=0 :
