"If viewing this file and it appears like with several '+-- X lines: ...' you
"can expand them easily by hovering over them and typeing ', ' or <leader><space>
"or just 'za'
" Looks, Layout and Folding {{{
set t_Co=256        "Terminal Colors set to 256
syntax on           "Creates better highlighting
colorscheme molokai "Uses the very nice looking 'molokai' thee
highlight Normal ctermfg=grey ctermbg=black
set background=dark
"Layout of the actual editor {{{
if v:version > 703  " If your using VIM 7.4 then:
    set relativenumber  " Show Relative Number on non-selected lines
endif
set number          " Show Highlighted Line number in relation to file
set cursorline      " Show location of cursor using a horizontal line
set ruler           " Shows current position
set noshowmode      " Prevents the 'mode' from showing (this is because airline does this for us) 
set laststatus=2    " Always show the status line
set lazyredraw      " Redraw the screen less, leading to faster response
set encoding=utf8   " Sets default encoding to utf8, and en_US as default language
set autoread        " Auto read a file when it is changed from the outside
set showmatch       " Shows matching bracket when highlighting with cursor
if has('mouse')
    set mouse=a
endif
if has('unnamedplus')
    set clipboard^=unnamedplus
else
    set clipboard^=unnamed
endif
" }}}
"Folding {{{
set foldenable      " Enables Folding
set foldlevelstart=10 " Opens the first 10 folds by default
set foldnestmax=10  " 10 nested fold max
set foldmethod=indent " Tells vim to fold based on indent level
set modeline        " Turn ModeLine On
set modelines=1     " Checks last line for file specific commands via modeline
" }}}
" }}}
"Spaceing, Tab Key, and Indention {{{
set autoindent      " Auto indenting
set smartindent     " Smarter indenting
set backspace=2     " Backspace in insert mode works like normal editor
set expandtab       " 1 tab = 4 spaces
set shiftwidth=4    " 1 tab = 4 spaces
set tabstop=4       " Backspace over a full tab if tab is expanded to tabstop or expandtab
set softtabstop=4   " Backspace over a full tab if tab is expanded to tabstop or expandtab
set smarttab        " Uses 'smart' tabs
set showtabline=2   " Always display the tabline, even if there is only 1 tab
"Specific to a filetype {{{
filetype indent on  " Activates indenting for files
filetype plugin on  " Activates plugins for file types
autocmd Filetype puppet setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd Filetype yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
" }}}
" }}}
"Writeing and backing up files {{{
set nobackup        " Get rid of annoying ~file
set nowb            " Helps above
set noswapfile      " Helps above
" }}}
"Menu and Search {{{
set wildmenu        " Shows auto completed menu's
set wildmode=list:longest " Make 'wildmenu' behave a little nicer
set hlsearch        " Highlights search results
set incsearch       " Search characters as you type them
set ignorecase      " Ignores case when searching 
set smartcase       " Even with ignore case, still try to be smart about it
" }}}
" Key Remaps {{{
" Leader is comma
let mapleader=","

" The below sets NERDTree to Ctrl+N
map <C-n> :NERDTreeToggle<CR>

" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Leader-space open/closes folds
nnoremap <leader><space> za

" Highlights last inserted text from insert mode in visual mode
nnoremap gV `[v`]

" Inteligently Remove line numbers (both kinds) with ,n add them again with ,n
if &relativenumber  " Hacky way of finding out if you have set 'relative number', if so turn it off with ,n
  nnoremap <silent> <leader>n :set invnumber <bar> :set invrelativenumber<CR>
else  
  nnoremap <silent> <leader>n :set invnumber<CR>
endif

" :W (Capitol W) saves the file with sudo, needed when editing some files
command W w !sudo tee % > /dev/null

" Quick saving of files
nnoremap <leader>w :w!<CR>

"For lines longer then the screens width, treat them as seperate lines
map j gj
map k gk

" Enables spell check, but only after pressing ,ss
" Press ,ss again to disable
" Cloned from github.com/amix
map <leader>ss :setlocal invspell<CR>

" For those of us who sometimes have to edit files in windows in non-vim,
" remove the ^M at the end of line
" Cloned from github.com/amix
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Map <F1> to <Esc> everywhere
map <F1> <Esc>
imap <F1> <Esc>
vmap <F1> <Esc>
nmap <F1> <Esc>

" Fix Common Spelling mistake of typeing q: instead of :q
nnoremap q: iq<Esc>

" ,y yanks to end of line
nnoremap <leader>y y$

" Run the entire file through the indent filter with <Leader>=
noremap <silent> <Leader>= :call Preserve("normal gg=G")<CR>

" Toggle paste mode with <Leader>p (need to turn it back off agian though!)
nnoremap <leader>p :set invpaste paste?<CR>

" Delete (not cut) selection
nnoremap <leader>d "_d
vnoremap <leader>d "_d
" }}}
" Vim Functions Stuff {{{
"Delete trailing white space on save, useful for Python
func! DeleteTrailingWS()
  exe "normal mz"
    %s/\s\+$//ge
      exe "normal `z"
      endfunc
      autocmd BufWrite *.py :call DeleteTrailingWS()
" }}}
" Plugin Stuff {{{
" VimPlug {{{
" The syntax is 'Plug' single quote name of author/vim-plugin single quote. So
" for example 'bling/vim-airline' is https://github.com/bling/vim-airline
call plug#begin('~/.vim/plugged')   " Starts using vim-plug https://github.com/junegunn/vim-plug
Plug 'bling/vim-airline'            " This is a bar that shows current mode as well as ton of useful info
Plug 'tomasr/molokai'               " Color scheme 'Molokai' for vim, since solarized is so touchy....
Plug 'aserebryakov/filestyle'       " Highlights tab and space combos, and trailing spaces
Plug 'Lokaltog/vim-easymotion'      " \ss causes triggers easy motion
Plug 'godlygeek/csapprox'           " Makes GVim Color Schemes work in Terminal Vim
Plug 'godlygeek/tabular'            " Awesome plugin for alligining text
Plug 'tpope/vim-fugitive'           " TPope's Git integration into vim
Plug 'tpope/vim-surround'           " Helps surrounding code and text with other code and text
Plug 'scrooloose/syntastic'         " Automatic Syntax Checking
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }      " Tree file navigator
Plug 'puppetlabs/puppet-syntax-vim', { 'for': 'puppet' }    " Puppet Syntax Highlighting
Plug 'rodjek/vim-puppet', { 'for': 'puppet' }               " Helps Vim Play Nice with Puppet
Plug 'rodjek/puppet-lint', { 'for': 'puppet' }              " Suggested by PuppetLabs as a linter
Plug 'klen/python-mode', { 'for': 'python' }                " Python edior on crack
Plug 'tmux-plugins/vim-tmux'        " A syntax highlighter for tmux! :D

call plug#end()                     " Stops using vim-plug
" }}}
" Powerline Specific Settings {{{
let g:airline_theme='luna' " This sets the theme of airline

if !exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif

let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_powerline_fonts = 1
" }}}
" Molokai Specific Settings {{{
let g:rehash256 = 1 " More like the gui 256 scheme'
" }}}
" Syntastic Specific Settings {{{
let g:syntastic_check_on_open = 1 " Check on file open
let g:syntastic_check_on_wq = 0 " Dont check on :wq
let g:syntastic_enable_signs = 1 " Enable symbols listed below 
let g:syntastic_auto_loc_list = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_error_symbol = "X"
let g:syntastic_style_error_symbol = ">"
let g:syntastic_warning_symbol = "!"
let g:syntastic_style_warning_symbol = ">"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Specific for C++ {{{
let g:syntastic_cpp_compiler = "g++" " Use g++ as compiler
let g:syntastic_cpp_check_header = 1 " Allows syntastic to check header files
let g:syntastic_cpp_compiler_options = ' -std=c++11 -Wall'

" }}}
" Specific for  Python {{{
let g:pymode_lint_write = 0 " This stops both python-mode and syntastic from both checking the file on write
let g:syntastic_python_checkers = ["python"]
" }}}
" Specific for Puppet {{{
let g:syntastic_puppet_checkers = ["puppetlint"]
" }}}
" }}}
" }}}
" Do not edit below line unless you know what your doing
" vim: set foldmethod=marker foldlevel=0 :
